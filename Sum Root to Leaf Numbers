dfs = Preorder Recursion

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        return dfs(root, 0);
    }

    private int dfs(TreeNode root, int sum){
        if(root == null){
            return 0;
        }

        sum = sum*10 + root.val;

        if(root.left == null && root.right == null){
            return sum;
        }
        return dfs(root.left, sum) + dfs(root.right, sum);
    }
}


==============================================================

DFS - Preorder Iteration

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        int result =0, currNo =0;
        Deque<Pair<TreeNode, Integer>> stack = new ArrayDeque<>();
        stack.push(new Pair<>(root, 0));

        while(!stack.isEmpty()){
            Pair<TreeNode, Integer> pair = stack.pop();
            root = pair.getKey();
            currNo = pair.getValue();

            if(root != null){
                currNo = currNo*10 + root.val;
                if(root.left == null && root.right == null){
                    result += currNo;
                }else{
                    stack.push(new Pair(root.left, currNo));
                    stack.push(new Pair(root.right, currNo));
                }
            }
        }

        return result;
    }
}
