class Solution {
    public int findKthLargest(int[] nums, int k) {
        // init heap 'the smallest element first'
        PriorityQueue<Integer> heap =
            new PriorityQueue<Integer>();

        for(int n:nums){
            heap.add(n);
            if(heap.size() > k)
                heap.poll();
        }
        
        return heap.poll();
  }
}


-----------------------------------------------------

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start =0; 
        int end = nums.length-1;
        int index = nums.length-k;
        
        while(start <= end){
            int partitionIndex = partition(nums, start, end);
            
            if(partitionIndex == index){
                return nums[index];
            }
            else if(partitionIndex < index){
                start = partitionIndex+1;
            }
            else{
                end = partitionIndex-1;
            }
        }
        
        return nums[start];
    }
    
    
    public int partition(int[] nums, int lo, int hi){
        int i=lo;
        int j= hi;
        int pivot = hi;
        
        while(i < j){
            while(i < j && nums[i] <= nums[pivot]){
                i++;
            }
            
            while(i < j && nums[j] >= nums[pivot]){
                j--;
            }
            
            swap(nums, i, j);
        }
        swap(nums, i, pivot);
        return i;
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
}


===================================

Quick select

class Solution {
    private Random random = new Random();

    public int findKthLargest(int[] nums, int k) {
        k = nums.length-k;

        return quickSelect(nums, 0, nums.length - 1, k);
    }

    private int quickSelect(int[] nums, int left, int right, int k){
        int pivotIndex = left + random.nextInt(right - left + 1);

        swap(nums, pivotIndex, right);

        int p = partition(nums, left, right);
        
        if(p > k){
            return quickSelect(nums, left, p-1, k);
        }else if(p < k){
            return quickSelect(nums, p+1, right, k);
        }else{
            return nums[p];
        }

    }

    private int partition(int[] nums, int left, int right){
        int pivot = nums[right];
        int p=left;

        for(int i=left; i < right; i++){
            if(nums[i] <= pivot){
                swap(nums, i, p);
                p++;
            }
        }

        swap(nums, p, right);
        return p;
    }

    private void swap(int[] nums, int a, int b){
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
