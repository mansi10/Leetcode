When sorting by the endpoints as done in this solution (#5 in the article), you always choose to drop the interval at position i, 
because it will always have a later endpoint than the previous - a more complete explanation is in the article. 
When sorting by the start points, you are right - you would need to take the minimum between previous kept end and the end at position i, 
because sorting by start points would not guarantee which endpoint is shorter.


// start points

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        
        int count = 0;
		if (intervals.length == 0) {
			return count;
		}

		Arrays.sort(intervals, (a,b) -> (a[0] - b[0]));
        
		count = 0;
		int end = intervals[0][1];

		for (int i = 1; i < intervals.length; i++) {
			if(intervals[i][0] < end) {
				end = Math.min(end, intervals[i][1]);
				count++;
			} else {
				end = intervals[i][1];
			}		
        }

		return count;
    }
}

--------------

// end points

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int count =0;

        if(intervals.length == 0){
            return count;
        }

        Arrays.sort(intervals,(a,b) -> (a[1] - b[1]));

        int end = intervals[0][1];

        for(int i=1; i<intervals.length;i++){
            if(intervals[i][0] < end){ // overlap
                count++;
            }else{
                end = intervals[i][1]; // no overlap
            }
        }
        return count;
    }
}
