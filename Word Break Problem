class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        return dfs(s, wordDict, 0);
    }

    private boolean dfs(String s, List<String> wordDict, int i){
        if(i == s.length()){
            return true;
        }

        for(String w : wordDict){
            if(i + w.length() <= s.length() && s.substring(i, i+w.length()).equals(w)){
                if(dfs(s, wordDict, i + w.length())){
                    return true;
                }

            }
        }
        return false;
    }
}

==========================================================================================

// dp

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet = new HashSet<>(wordDict);
        
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true; // null string is always present in the dictionary
        
        for(int i=1; i <= s.length(); i++){ // end pointer
            for(int j= 0; j<i; j++){ // start pointer
                if(dp[j] && wordDictSet.contains(s.substring(j, i))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}



