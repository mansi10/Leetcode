class Solution {
    private boolean arrayContains(int[] arr, int num) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == num) {
                return true;
            }
        }

        return false;
    }
    public int longestConsecutive(int[] nums) {
        int longestStreak = 0;

        for (int num : nums) {
            int currentNum = num;
            int currentStreak = 1;

            while (arrayContains(nums, currentNum + 1)) {
                currentNum += 1;
                currentStreak += 1;
            }

            longestStreak = Math.max(longestStreak, currentStreak);
        }

        return longestStreak;
    }
}



------------------------------------------------------------------------

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        Arrays.sort(nums);

        int longestStreak = 1;
        int currentStreak = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i-1]) {
                if (nums[i] == nums[i-1]+1) {
                    currentStreak += 1;
                }
                else {
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }

        return Math.max(longestStreak, currentStreak);
    }
}


----------------------------------------------------------------------

class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> result = new HashSet<>();
        
        for(int n : nums){
            result.add(n);
        }
        
        int longestStreak=0;
        for(int n: nums){
            if(!result.contains(n-1)){
                int currentNum=n;
                int currentStreak= 1;
                
                while(result.contains(currentNum+1)){
                    currentNum +=1;
                    currentStreak +=1;
                }
                
                longestStreak= Math.max(longestStreak, currentStreak);
            }
    }
        return longestStreak;
    }
}

=====================================

class Solution {
    public int longestConsecutive(int[] nums) {
        int longestStreak =0; 

        if(nums.length == 0){
            return 0;
        }

        Set<Integer> set = new HashSet<>();
        for(int num : nums){
            set.add(num);
        }

        for(int num : set){
            if(!set.contains(num-1)){
                int currentStreak = 1;
                while(set.contains(num + currentStreak)){
                    currentStreak++;
                }
                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }
        return longestStreak;
    }
}
