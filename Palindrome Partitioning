class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        
        if(s.length() ==0 || s== null)
            return result;
        
        helper(s, result, new ArrayList<>());
        
        return result;
    }
    
    public void helper(String s, List<List<String>> result, List<String> currList){
        if(s.length() == 0){
            result.add(new ArrayList<>(currList));
        }
        
        for(int i=0; i< s.length(); i++){
            String firstPart = s.substring(0, i+1);
            if(isPalindrome(firstPart)){
                currList.add(firstPart);
                String secondString = s.substring(i+1, s.length());
                helper(secondString, result, currList);
                currList.remove(currList.size()-1);
            }
        }
        
    }
    
    public boolean isPalindrome(String s){
        String reversedString = new StringBuilder(s).reverse().toString();
        
        return s.equals(reversedString);
    }

}

=============================

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        dfs(0, s, result, new ArrayList<String>());
        return result;
    }

    private void dfs(int start, String s, List<List<String>> res, List<String> cur){
        if(start == s.length()){
            res.add(new ArrayList<>(cur));
        }else{
            for(int i= start; i < s.length(); i++){
                if(checkPalindrome(s, start, i)){
                    cur.add(s.substring(start, i + 1));
                    dfs(i + 1, s, res, cur);
                    cur.remove(cur.size() - 1);
                }
            }
        }
    }

    private boolean checkPalindrome(String s, int lo, int hi) {
        while (lo < hi) {
            if (s.charAt(lo++) != s.charAt(hi--)) {
                return false;
            }
        }
        return true;
    }
}
