public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        // Sorting helps so that if nums[j] % nums[i] == 0, we know nums[j] >= nums[i].
        Arrays.sort(nums);
        int n = nums.length;

        // dp[i] will store the largest divisible subset starting at index i.
        List<Integer>[] dp = new ArrayList[n];
        // res will store the overall largest subset found.
        List<Integer> res = new ArrayList<>();

        for (int i = n - 1; i >= 0; i--) {
            dp[i] = new ArrayList<>();
            dp[i].add(nums[i]);

            // Traverse backwards so we can build answers for larger numbers first, and use them to 
            // build answers for smaller numbers
            for (int j = i + 1; j < n; j++) {
                // Check if nums[j] is divisible by nums[i]. If yes, try extending dp[j] by 
                // prepending nums[i].
                if (nums[j] % nums[i] == 0) {
                    List<Integer> tmp = new ArrayList<>();
                    tmp.add(nums[i]);
                    tmp.addAll(dp[j]);

                    // Update dp[i] if we find a bigger subset:
                    if (tmp.size() > dp[i].size()) {
                        dp[i] = tmp;
                    }
                }
            }
            // Update result if this is the biggest seen so far:
            if (dp[i].size() > res.size()) {
                res = dp[i];
            }
        }
        return res;
    }
}
