class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea =0;
        
        for(int i=0; i<grid.length;i++){
            for(int j=0; j< grid[0].length;j++){
                if(grid[i][j] == 1){
                    maxArea = Math.max(maxArea, checkdfs(grid, i, j));
                }
            }
        }
        return maxArea;
    }
    
    public int checkdfs(int[][] grid, int i, int j){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] <= 0){
            return 0;
        }
        
        grid[i][j] = -1;
        int topArea = checkdfs(grid, i-1, j);
        int downArea = checkdfs(grid, i+1, j);
        int leftArea = checkdfs(grid, i, j-1);
        int rightArea = checkdfs(grid, i, j+1);
        
        int totalArea = 1 + topArea + downArea + leftArea + rightArea;
        
        return totalArea;
    }
    
}

==============================

BFS 

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int[][] directions = {{0,1}, {1,0}, {-1,0}, {0,-1}};
        int rows = grid.length;
        int cols = grid[0].length;
        int maxArea =0;
        boolean[][] marked = new boolean[rows][cols];

        if(grid == null || grid.length == 0){
            return 0;
        }

        for(int i=0; i < rows; i++){
            for(int j=0; j < cols; j++){
                if(grid[i][j] == 1 && !marked[i][j]){
                    maxArea = Math.max(maxArea, bfs(grid, i, j, marked, directions));
                }
            }
        }
        return maxArea;
    }

    private int bfs(int[][] board, int m, int n, boolean[][] visited, int[][] dirs){
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{m, n});
        visited[m][n] = true;
        int count=0;

        while(!queue.isEmpty()){
            count++;
            int[] curr = queue.poll();
            
            for(int[] dir : dirs){
                int nr = curr[0] + dir[0];
                int nc = curr[1] + dir[1];

                if(nr >= 0 && nc >= 0 && nr < board.length && nc < board[0].length && board[nr][nc] == 1 && !visited[nr][nc]){
                    queue.offer(new int[] {nr, nc});
                    visited[nr][nc] = true;
                }

            }
        }

        return count;
    }
}
