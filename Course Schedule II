class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] ans = new int[numCourses];
        int[] indegree = new int[numCourses];

        Map<Integer, Set<Integer>> adjList = new HashMap<>();
        for(int i=0; i < numCourses; i++){
            adjList.put(i, new HashSet<>());
        }

        for(int[] pre : prerequisites){
            adjList.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }

        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i < numCourses; i++){
            if(indegree[i] == 0){
                queue.add(i);
            }
        }

        int i=0;
        int count=0;
        while(!queue.isEmpty()){
            int node = queue.remove();
            ans[i++] = node;
            count++;

            for(int neighbour : adjList.get(node)){
                indegree[neighbour]--;
                if(indegree[neighbour] == 0){
                    queue.add(neighbour);
                }
            }
        }

        if(count != numCourses){
            return new int[0];
        }

        return ans;
    }
}
