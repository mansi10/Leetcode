class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] chess = new char[n][n];

        for(int i=0; i < n; i++){
            for (int j=0; j < n; j++){
                chess[i][j] = '.';
            }
        }

        placeQueens(chess, result, 0);
        return result;
    }

    private void placeQueens(char[][] chess, List<List<String>> res, int row){
        if(row == chess.length){
            res.add(buildChess(chess));
            return;
        }

        for(int i=0; i < chess.length; i++){
            if(isValid(chess, row, i)){
                chess[row][i] = 'Q';
                placeQueens(chess, res, row+1);
                chess[row][i] = '.';
            }
        }
    }

    private boolean isValid(char[][] chess, int row, int col){
        for(int i= 0; i < row; i++){
            if(chess[i][col] == 'Q'){
                return false;
            }
        }

        for(int i= row - 1, j = col + 1; i >= 0 && j < chess.length; i--, j++){
            if(chess[i][j] == 'Q'){
                return false;
            }
        }

        for(int i= row-1, j = col - 1; i >= 0 && j >= 0; i--, j--){
            if(chess[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }

    private List<String> buildChess(char[][] chess){
        List<String> path = new ArrayList<>();
        for(int i=0; i < chess.length; i++){
            path.add(new String(chess[i]));
        }
        return path;
    }
}
