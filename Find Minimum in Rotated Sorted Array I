class Solution {
  public int findMin(int[] nums) {
    // If the list has just one element then return that element.
    if (nums.length == 1) {
      return nums[0];
    }

    // initializing left and right pointers.
    int left = 0, right = nums.length - 1;

    // if the last element is greater than the first element then there is no rotation.
    // e.g. 1 < 2 < 3 < 4 < 5 < 7. Already sorted array.
    // Hence the smallest element is first element. A[0]
    if (nums[right] > nums[0]) {
      return nums[0];
    }
    
    // Binary search way
    while (right >= left) {
      // Find the mid element
      int mid = left + (right - left) / 2;

      // if the mid element is greater than its next element then mid+1 element is the smallest
      // This point would be the point of change. From higher to lower value.
      if (nums[mid] > nums[mid + 1]) {
        return nums[mid + 1];
      }

      // if the mid element is lesser than its previous element then mid element is the smallest
      if (nums[mid - 1] > nums[mid]) {
        return nums[mid];
      }

      // if the mid elements value is greater than the 0th element this means
      // the least value is still somewhere to the right as we are still dealing with elements
      // greater than nums[0]
      if (nums[mid] > nums[0]) {
        left = mid + 1;
      } else {
        // if nums[0] is greater than the mid value then this means the smallest value is somewhere to
        // the left
        right = mid - 1;
      }
    }
    return -1;
  }
}


--------------------

class Solution {
    public int findMin(int[] nums) {
        int l= 0;
        int r= nums.length-1;
        
        if(nums.length == 1){
            return nums[0];
        }
    
// This is the way I thought about it:

// - If the array is not rotated, we want to return the first element
// - Because of this, we "tend" to go towards `nums[0]`
// - That's why we "try" to bring `high` towards `low`
        
// In simple words: We want to go to the non-sorted part after finding mid.
// If nums[mid] < nums[right], it implies the right part of mid is fully sorted and our minimum value has to be in the other "non-sorted" part.
// Hence we make right = mid and go to that part.
// Else if nums[mid] > nums[right], this means our left part is the sorted one.
// Hence we go to the non-sorted right part with left = mid + 1
        
// Think of only 2 elements as input, then mid will always be equal to low in that case you don't have any element left to your mid but always an element to the right of mid.
        
// Eg- [3,1,2] mid = (0+2)/2 = 1, nums[mid] = 1, which is the smallest so if you do mid = end-1 your're excluding it from the search space.
        while(l < r){
            int mid = (l + r)/2;
            
            if(nums[mid] <= nums[r]){
                r = mid;
            }
            else{
                l = mid+1;
            }
        }
        return nums[l];
    }
}

==========================================

class Solution {
    public int findMin(int[] nums) {
        // https://takeuforward.org/data-structure/minimum-in-rotated-sorted-array/
        
        int low=0, high= nums.length -1;
        int ans = Integer.MAX_VALUE;
        while(low <= high){
            int mid = (low + high)/2;

            if(nums[low] <= nums[mid]){
                ans = Math.min(ans, nums[low]);
                low = mid+1;
            }else{
                ans= Math.min(ans, nums[mid]);
                high = mid-1;
            }
        }
        return ans;
    }
}
