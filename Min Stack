class MinStack {


	private Stack<int[]> st = null;
	public MinStack() {
		st = new Stack<>();
	}

	public void push(int val) {
		if(!st.isEmpty()){
			int[] top =  st.peek();
			int min = Math.min(top[1], val);
			st.push(new int[]{val, min});
		} else {
			st.push(new int[]{val, val});
		}

	}

	public void pop() {

		if(!st.isEmpty()) {
			st.pop();
		}
	}

	public int top() {
		int[] top =  st.peek();
		return top[0];
	}

	public int getMin() {

		int[] top =  st.peek();
		return top[1];
	}
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 ------------------
 
 class MinStack {
    Stack<Integer> stack = null;
    Stack<int[]> minStack = null;

    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }
    
    public void push(int val) {
        stack.push(val);
        
        if(minStack.isEmpty() || val < minStack.peek()[0]){
            minStack.push(new int[]{val, 1});
        }
        else if(val == minStack.peek()[0]){
            minStack.peek()[1]++;
        }
    }
    
    public void pop() {
        if(stack.peek().equals(minStack.peek()[0])){
            minStack.peek()[1]--;
        }
        
        if(minStack.peek()[1] == 0){
            minStack.pop();
        }
        
        stack.pop();
    }
    
    public int top() {
            return stack.peek();
    }
    
    public int getMin() {
            return minStack.peek()[0];
    }
    
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 ========================

class MinStack {
    Stack<Integer> stack;
    Stack<Integer> minStack;
   

    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }
    
    public void push(int val) {
      stack.push(val);
      if(minStack.isEmpty() || val <= minStack.peek()){
        minStack.push(val);
      }
    }
    
    public void pop() {
        if(!stack.isEmpty()){
            int top = stack.pop();
            if(top == minStack.peek()){
                minStack.pop();
            }
        }
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
