class Solution {
    public String removeDuplicates(String s) {
        boolean changed = true;
        while (changed) {
            changed = false;
            for (int i = 0; i < s.length() - 1; i++) {
                if (s.charAt(i) == s.charAt(i + 1)) {
                    s = s.substring(0, i) + s.substring(i + 2);
                    changed = true;
                    break; // restart after one removal
                }
            }
        }
        return s;
    }
}

==============================

class Solution {
    public String removeDuplicates(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                stack.pop();
            } else {
                stack.push(c);
            }
        }
        // Build result (need reverse since stack pops LIFO)
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();
    }
}

=====================================

class Solution {
    public String removeDuplicates(String s) {
        StringBuilder sb = new StringBuilder();
        
        // iterate over each character
        for (char c : s.toCharArray()) {
            
            // if last character in sb == current char â†’ it's a duplicate
            if (sb.length() > 0 && sb.charAt(sb.length() - 1) == c) {
                sb.deleteCharAt(sb.length() - 1); // remove last char
            } else {
                sb.append(c); // otherwise, add current char
            }
        }
        
        return sb.toString();
    }
}

