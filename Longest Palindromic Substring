Brute-Force
For each character i, we examine all substrings starting from index i and check if they are palindromic.

class Solution {
    public String longestPalindrome(String s) {
        String maxLengthStr = "";
        for(int i=0; i < s.length(); i++){
            for(int j = i; j < s.length(); j++){
                if(isPalindrome(s, i, j)){
                    if((j-i+1) > maxLengthStr.length()){
                        maxLengthStr = s.substring(i, j+1);
                    }
                }
            }
        }
        return maxLengthStr;
    }

    private boolean isPalindrome(String s, int lo, int hi){
        while(lo < hi){
            if(s.charAt(lo) != s.charAt(hi)){
                return false;
            }
            lo++;
            hi--;
        }
        return true;
    }
}


----------------------------------------------



public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}

-------------------------------------------


// core logic: with one character and 2 characters as center, find the palindrome for each case, and whenever you encounter the longest palindrome, update it
        // two cases are needed to handle the odd and even cases separately
        private static String longestPalindrome(String s) {
            if (s == null || s.length() <= 1 || s.equals("")) {
                return s;
            }
    
            String longest = s.substring(0, 1);
            for (int i = 0; i < s.length(); i++) {
                String temp = palindromeHelper(s, i, i);  // odd length
                if (temp.length() > longest.length()) {
                    longest = temp;
                }
    
                temp = palindromeHelper(s, i, i + 1);  // even length
                if (temp.length() > longest.length()) {
                    longest = temp;
                }
            }
            return longest;
        }
    
        // given a string and the CENTER(S) of the palindrome (i and i+1), find the longest possible palindrome
        // from center, go left and right till characters are same and return the longest palindromic substring
        private static String palindromeHelper(String string, int begin, int end) {
            while (begin >= 0 && end < string.length() && string.charAt(begin) == string.charAt(end)) {
                begin--;
                end++;
            }
            return string.substring(begin + 1, end);
        }


===============================================================

class Solution {
    int maxLength=0;
    int startingPoint=0;

    public String longestPalindrome(String s) {

        if(s.length()<=1){
            return s;
        }

        for(int i=0; i<s.length(); i++){
            checkIfPalindrome(i, i, s);
            checkIfPalindrome(i, i+1, s);
        }
        return s.substring(startingPoint, startingPoint+maxLength);
    }

    private int checkIfPalindrome(int start, int end, String s){
        while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)){
            start--;
            end++;
        }

        if(maxLength < end-start-1){
            maxLength = end-start-1;
            startingPoint= start+1;
        }
        return maxLength;
    }
}
