class GenerateParentheses {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        generateParenthesisRecursive(result, "", 0, 0, n);
        
        return result;
    }
    
    public void generateParenthesisRecursive(List<String> result, String current, int open, int close, int n) {
        if(current.length() == n * 2) {
            result.add(current);
            return;
        }
        
        if(open < n) {
            generateParenthesisRecursive(result, current + "(", open + 1, close, n);
        }
        
        if(close < open) {
            generateParenthesisRecursive(result, current + ")", open, close + 1, n);
        }
    }
}
========================

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(n, result, new StringBuilder(), 0, 0);
        return result;
    }

    private void backtrack(int n, List<String> ans, StringBuilder sb, int open, int close) {
        if (open == close && sb.length() == n * 2) { // base case
            ans.add(sb.toString());
            return;
        }

        if (open < n) {
            sb.append("(");
            backtrack(n, ans, sb, open + 1, close);
            sb.deleteCharAt(sb.length() - 1);
        }

        if (close < open) {
            sb.append(")");
            backtrack(n, ans, sb, open, close + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
