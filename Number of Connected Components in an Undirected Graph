Approach 1: 

class Solution {
    public int countComponents(int n, int[][] edges) {
        int components =0;
        
        boolean[] visited = new boolean[n];
        Map<Integer, Set<Integer>> adjList = new HashMap<>();
        
        // initialize adjacency list
        for(int i=0; i<n; i++){
            adjList.put(i, new HashSet<>());
        }
        
        // populate adjacency list
        for(int[] edge : edges){
            int edge1 = edge[0];
            int edge2 = edge[1];
            
            adjList.get(edge1).add(edge2);
            adjList.get(edge2).add(edge1);
        }
        
        // call dfs for each node and count total components
        for(int i=0; i<n; i++){
            if(!visited[i]){
                components++;
                dfs(adjList, visited, i);
            }
        }
        
        return components;
    }
    
    private void dfs(Map<Integer, Set<Integer>> adjList, boolean[] visited, int startNode){
        visited[startNode] = true;
        for(int children : adjList.get(startNode)){
            if(!visited[children]){
                dfs(adjList, visited, children);
            }
        }
    }
    
}

---------------------------

Approach 2: DSU 

class Solution {
    public int countComponents(int n, int[][] edges) {
        // O(V)
        int[] representative = new int[n];
        int[] size = new int[n];

        for (int i = 0; i < n; i++) { // O(V)
            size[i] = 1;
            representative[i] = i;
        }

        int components = n; // every node has its own representative

        //iterate through all edges O(E).ALPHASV
        for (int i = 0; i < edges.length; i++) {
            component -= combine(representative, size, edges[i][0], edges[i][1]); // DECREASE the no of components
        }
        return components;
    }

    private find(int[] representative, int vertex){
        if (vertex == representative[vertex]) {
            return vertex;
        }
        
        return representative[vertex] = find(representative, representative[vertex]);
    }

    private int combine(int[] representative, int[] size, int v1, int v2){
        v1 = find(representative,v1);
        v2 = find(representative,v2);
        if(v1 == v2){ // if kings are same, no battle takes place
            return 0; // no of representatives don't decrease in ase of no battle
        }else if(size[v1] > size[v2]){
            size[v1] += size[v2];
            representative[v2] == v1;
        }else{
             size[v2] += size[v1];
            representative[v1] == v2;
        }
        return 1; // no of kings decrease by 1 in case of battle
    }
}
