/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        // ListNode prev=null;
        ListNode l1=head;
        
        while(fast != null && fast.next != null){
            fast=fast.next.next;
            slow=slow.next;
        }
         
        // Divide the list into two halves 
        ListNode prev = slow;
        slow = slow.next; 
        prev.next =null;
        
        ListNode l2= reverse(slow);
        
        merge(l1,l2);
    }
    
    public ListNode reverse(ListNode head){
        ListNode pre=null;
        ListNode curr=head;
        
        while(curr != null){
            ListNode temp= curr.next;
            curr.next=pre;
            pre=curr;
            curr=temp;
        }
        return pre;
    }
    
    public void merge(ListNode l1, ListNode l2){
        while(l1 != null && l2 != null){
            ListNode l1_next= l1.next;
            ListNode l2_next = l2.next;
            
            l1.next=l2;
            l2.next=l1_next;
            l1=l1_next;
            l2=l2_next;
        }
        
    }
    
}


-----------------

class Solution {
    public void reorderList(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        ListNode prev=null;
        ListNode l1=head;
        
        while(fast != null && fast.next != null){
            fast=fast.next.next;
            slow=slow.next;
        }
        
        ListNode slowest = slow.next;
        slow.next=null;
        
        ListNode l2= reverse(slowest);
        
        merge(l1,l2);
    }
    
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        
        while(curr != null){
            ListNode temp= curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
    
    public void merge(ListNode l1, ListNode l2){
        while(l1 != null && l2 != null){
            ListNode l1_next= l1.next;

            ListNode l2_next = l2.next;
            
            l1.next=l2;
            l2.next=l1_next;
            l1=l1_next;
            l2=l2_next;
        }
        
    }
    
}


================================================

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        ListNode l1 = head; // head of first half
        ListNode prev = null; // tail of first half
        ListNode slow = head; // head of second half
        ListNode fast = head;

        if (head == null || head.next == null || head.next.next == null) {
            return;
        }

        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        prev.next = null;

        ListNode slowPrev = reverse(slow);

        merge(l1, slowPrev);
    }

    private ListNode reverse(ListNode l1) {
        ListNode curr = l1;
        ListNode prev = null;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }

    private void merge(ListNode l1, ListNode l2) {
        while(l2 != null){
            ListNode l1_next = l1.next;
            ListNode l2_next = l2.next;

            l1.next = l2;
            l2.next=l1_next;
            l1=l1_next;
            l2=l2_next;
        }
    }

}
