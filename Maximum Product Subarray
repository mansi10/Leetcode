
class Solution {
    public int maxProduct(int[] nums) {
        
        if(nums.length == 0)
            return 0;
        
        int maxProduct =nums[0];
        
        for(int i=0; i< nums.length; i++){
            int product=1;
            for(int j=i; j< nums.length; j++){
                product *= nums[j];
                maxProduct= Math.max(maxProduct, product);
            }
        }
        return maxProduct;
    }
}


----------------------------------------------------------


class Solution {
    public int maxProduct(int[] nums) {
        
        if(nums.length == 0)
            return 0;
        
        int max_so_far =nums[0];
        int min_so_far =nums[0];
        int result =max_so_far;
        
        for(int i=1; i< nums.length; i++){
            int curr= nums[i];
            max_so_far= Math.max(curr, Math.max(max_so_far*curr, min_so_far * curr));
            min_so_far= Math.min(curr, Math.min(max_so_far*curr, min_so_far * curr));
            
            result=Math.max(max_so_far, result);
        }
        return result;
    }
}

-------------------------------------------------------


class Solution {
    public int maxProduct(int[] nums) {
        
        int max = nums[0], min = nums[0], ans = nums[0];
        
        for (int i = 1; i < nums.length; i++) {
            
            int temp = max;  // store the max because before updating min your max will already be updated
            
            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);
            min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);
            
            if (max > ans) {
                ans = max;
            }
        }
        
        return ans;

    }
}



--------------------------------------------------------

Approach 2: Just the slight modification of previous approach. As we know that on multiplying with negative number max will become min and min will become max, so why not as soon as we encounter negative element, we swap the max and min already.

class Solution {
    public int maxProduct(int[] nums) {
        
        int max = nums[0], min = nums[0], ans = nums[0];
        int n = nums.length;
        
        for (int i = 1; i < n; i++) {
        
			// Swapping min and max
            if (nums[i] < 0){
                int temp = max;
                max = min;
                min = temp;
            }
                


            max = Math.max(nums[i], max * nums[i]);
            min = Math.min(nums[i], min * nums[i]);


            ans = Math.max(ans, max);
        }
        
        return ans;

    }
}

===========================================================

class Solution {
    public int maxProduct(int[] nums) {
        // https://takeuforward.org/data-structure/maximum-product-subarray-in-an-array/
        // optimal approach 1
        int pref=1, suff=1;
        int result=Integer.MIN_VALUE;

        for(int i=0; i< nums.length; i++){
            if(pref == 0) pref=1;
            if(suff == 0) suff =1;

            pref *= nums[i];
            suff *= nums[nums.length-i-1];

            result = Math.max(result, Math.max(pref, suff));
        }
        return result;
    }
}




