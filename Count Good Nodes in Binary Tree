/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 // TC- O(N)
 // SC- O(N)
 
class Solution {
    public int goodNodesCount = 0;
    
    public int goodNodes(TreeNode root) {
        dfs(root, Integer.MIN_VALUE);
        
        return goodNodesCount;
    }
    
    public void dfs(TreeNode root, int maxValue){
        if(root == null){
            return ;
        }
        
        if(root.val >= maxValue){
            goodNodesCount++;
            maxValue = root.val;
        }
        
        dfs(root.left, maxValue);
        dfs(root.right, maxValue);
        
    }
    
}


-----------------------------------

public int goodNodes(TreeNode root) {
    Stack<Pair<TreeNode,Integer>> stack = new Stack<>();
    stack.push(new Pair<TreeNode,Integer>(root, root.val));
    int count = 1;
    
    while(!stack.isEmpty()) {
        TreeNode node = stack.peek().getKey();
        int max = stack.pop().getValue();
        
        if(node.right != null) {
            if(max <= node.right.val) {
                count++;
            }
            stack.push(new Pair<TreeNode,Integer>(node.right, Math.max(max,node.right.val)));
        }
        if(node.left != null) {
            if(max <= node.left.val) {
                count++;
            }
            stack.push(new Pair<TreeNode,Integer>(node.left, Math.max(max,node.left.val)));
        }
    }
    
    return count;
}


========================================================================

class Solution {
    public int goodNodes(TreeNode root) {
        if (root == null) return 0;

        int count = 0;
        Deque<Pair<TreeNode, Integer>> stack = new ArrayDeque<>();
        stack.push(new Pair<>(root, root.val));

        while (!stack.isEmpty()) {
            Pair<TreeNode, Integer> current = stack.pop();
            TreeNode node = current.getKey();
            int maxSoFar = current.getValue();

            if (node.val >= maxSoFar) {
                count++;
            }

            int newMax = Math.max(maxSoFar, node.val);
            if (node.right != null) {
                stack.push(new Pair<>(node.right, newMax));
            }
            if (node.left != null) {
                stack.push(new Pair<>(node.left, newMax));
            }
        }

        return count;
    }
}

======================================

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        int count=0;
    public int goodNodes(TreeNode root) {
        dfs(root, root.val);
        return count;
    }

    private void dfs(TreeNode curr, int max){
        if(curr.val >= max){
            max = curr.val;
            count += 1;
        }

        if(curr.left != null){
            dfs(curr.left, max);
        }

        if(curr.right != null){
            dfs(curr.right, max);
        }
    }
}



