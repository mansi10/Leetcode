class RandomizedCollection {
    Random rand;
    List<Integer> list;
    Map<Integer, Set<Integer>> map;

    public RandomizedCollection() {
        rand = new Random();
        list = new ArrayList<>();
        map = new HashMap<>();
    }
    
    public boolean insert(int val) {
        if(!map.containsKey(val)){
            map.put(val, new HashSet<>());
        }
        map.get(val).add(list.size());
        list.add(val);
        return map.get(val).size() == 1;
    }
    
   public boolean remove(int val) {
    if (!map.containsKey(val)) {
        return false;
    }

    int idxToRemove = map.get(val).iterator().next();
    int lastVal = list.get(list.size() - 1);

    // Remove the index from val's set
    map.get(val).remove(idxToRemove);

    // If not removing the last element itself, replace it
    if (idxToRemove != list.size() - 1) {
        list.set(idxToRemove, lastVal);

        // Update the map for lastVal only if it's not the same as val,
        // or val hasn't been fully removed yet
        map.get(lastVal).remove(list.size() - 1);
        map.get(lastVal).add(idxToRemove);
    }

    list.remove(list.size() - 1);

    // Clean up map if no more val
    if (map.get(val).isEmpty()) {
        map.remove(val);
    }

    return true;
}

    
    public int getRandom() {
        // return list.get(rand.nextInt(list.size()));
        return list.get(rand.nextInt(list.size()));
    }
}

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
