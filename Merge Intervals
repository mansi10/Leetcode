class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1){
            return intervals;
        }
        
        Arrays.sort(intervals, (arr1, arr2) -> Integer.compare(arr1[0], arr2[0]));
        
        List<int[]> result= new ArrayList<>();
        
        int[] current_interval= intervals[0];
        result.add(current_interval);
        
        for(int[] interval : intervals){
            int current_begin= current_interval[0];
            int current_end= current_interval[1];
            int next_begin= interval[0];
            int next_end= interval[1];
            
            if(current_end >= next_begin){
                current_interval[1]= Math.max(current_end, next_end);
            }
            else{
                current_interval= interval;
                result.add(current_interval);
            }
        }
        return result.toArray(new int[result.size()][]);
        
    }
}
===================

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> result = new ArrayList<>();
        Arrays.sort(intervals,(a,b) -> Integer.compare(a[0], b[0]));

        for(int[] interval : intervals){
            if(result.isEmpty() || result.getLast()[1] < interval[0]){
                result.add(interval);
            }else{
                result.getLast()[1] = Math.max(result.getLast()[1], interval[1]);
            }
        }

        return result.toArray(new int[result.size()][]);
    }
}
