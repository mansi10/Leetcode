// https://neetcode.io/problems/permutation-string?list=neetcode150

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1= s1.length();
        int len2= s2.length();

        if(len1 > len2){
            return false;
        }

        int[] s1count = new int[26];
        int[] s2count = new int[26];
        int matches =0;

        for(int i=0; i < len1; i++){ // take first 3 chars from second string and update count array 
            s1count[s1.charAt(i) - 'a']++;
            s2count[s2.charAt(i) - 'a']++;
        }

        for(int i=0; i < 26; i++){// update matches variable 
            if(s1count[i] == s2count[i]){
                matches++;
            }
        }

        int l=0; 
        for(int r = len1; r < len2; r++){
            if(matches == 26){
                return true;
            }
            // extending sliding window when a new character is added
            int index = s2.charAt(r) - 'a';
            s2count[index]++;
            if(s2count[index] == s1count[index]){
                matches++;
            }else if(s2count[index] == s1count[index] + 1){
                matches--;
            }
             // contracting sliding window when a new character is removed
            index = s2.charAt(l) - 'a';
            s2count[index]--;
            if(s2count[index] == s1count[index]){
                matches++;
            }else if(s2count[index] == s1count[index] - 1){
                matches--;
            }
            l++;
        }
        return matches == 26;
    }
}
