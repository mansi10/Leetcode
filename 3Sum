class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Arrays.sort(nums);
        
        List<List<Integer>> result = new ArrayList<>();
        
//fix 1st element and find if the sum of other numbers is negative of first number
        for(int i=0; i< nums.length-2; i++){
            
            // if it's first element or current and previous element are same
            if((i == 0) || ( i > 0 && nums[i] != nums[i-1])){
                
                int low= i+1; 
                int high=nums.length-1;
                int sum= 0- nums[i];
                
                while(low < high){
                    
                    if(nums[low] + nums[high] == sum){
                        
                        result.add(Arrays.asList(nums[i], nums[low], nums[high]));
                        
                        // to avoid duplicate triplets
                        while(low < high && nums[low] == nums[low+1])
                            low++;
                        
                        while(low < high && nums[high] == nums[high-1])
                            high--;
                        
                        low++;
                        high--;
                    }
                    else if( nums[low] + nums[high] < sum){
                        low++;
                    } else {
                        high--;
                    }
                }
            }   
        }
        return result;
    }
}



----------------------------------------------------------

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < nums.length && nums[i] <= 0; ++i)
            if (i == 0 || nums[i - 1] != nums[i]) {
                twoSumII(nums, i, res);
            }
        return res;
    }
    void twoSumII(int[] nums, int i, List<List<Integer>> res) {
        int lo = i + 1, hi = nums.length - 1;
        while (lo < hi) {
            int sum = nums[i] + nums[lo] + nums[hi];
            if (sum < 0) {
                ++lo;
            } else if (sum > 0) {
                --hi;
            } else {
                res.add(Arrays.asList(nums[i], nums[lo++], nums[hi--]));
                while (lo < hi && nums[lo] == nums[lo - 1])
                    ++lo;
            }
        }
    }
}

-----------------------------------------------------------------

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < nums.length && nums[i] <= 0; ++i)
            if (i == 0 || nums[i - 1] != nums[i]) {
                twoSum(nums, i, res);
            }
        return res;
    }
    void twoSum(int[] nums, int i, List<List<Integer>> res) {
        var seen = new HashSet<Integer>();
        for (int j = i + 1; j < nums.length; ++j) {
            int complement = -nums[i] - nums[j];
            if (seen.contains(complement)) {
                res.add(Arrays.asList(nums[i], nums[j], complement));
                while (j + 1 < nums.length && nums[j] == nums[j + 1])
                    ++j;
            }
            seen.add(nums[j]);
        }
    }
}

=================================

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       List<List<Integer>> result = new ArrayList<>();
       Arrays.sort(nums);

       for(int i=0; i < nums.length; i++){
        
        if(i != 0 && nums[i] == nums[i-1]){
            continue; // skip if duplicates
        }

        int j= i+1;
        int k = nums.length-1;

        while(j < k){
            int sum = nums[i] + nums[j] + nums[k];

            if(sum < 0){
                j++;
            }else if(sum > 0){
                k--;
            }else{
                List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                result.add(temp);
                j++;
                k--;
                // to avoid duplicates
                while(j < k && nums[j] == nums[j-1])
                    j++;
                while(j < k && nums[k] == nums[k+1])
                    k--;
            }
        }
       }
       return result;
    }
}
