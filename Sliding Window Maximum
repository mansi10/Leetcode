brute force

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int len = nums.length;
        int[] ans = new int[len-k+1];

        for(int i =0; i <=len-k; i++){
            int max = nums[i];
            for(int j=i; j < i+k; j++){
                max = Math.max(max, nums[j]);
            }
            ans[i] = max;
        }
        return ans;
    }
}


===========================================================

Deque

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int len = nums.length;
        int[] ans = new int[len-k+1];

        Deque<Integer> dq = new ArrayDeque<>();
        int l =0;
        
        for(int r =0; r < len; r++){
            // remove numbers out of range k
            if(!dq.isEmpty() && dq.getFirst() == r-k){
                dq.removeFirst();
            }

             // remove smaller numbers in k range as they are useless
            while(!dq.isEmpty() && nums[dq.getLast()] <= nums[r]){
                dq.removeLast();
            }

            dq.addLast(r);
            if(r >= k-1){
                ans[l] = nums[dq.getFirst()];
                l++;
            }
        }

        return ans;
    }
}
