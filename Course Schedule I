class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        if(prerequisites == null || prerequisites.length == 0 || prerequisites[0].length == 0)    
        return true;
        
        // building graph
        List<List<Integer>> list = new ArrayList<>(numCourses);
        
        for(int i = 0; i < numCourses; i++) {
            list.add(new ArrayList<Integer>());
        }
        
        // Fill the arraylists of each nodes with their outgoing edges/connected nodes
        for(int[] p: prerequisites) {
            int prerequisite = p[1];
            int course = p[0];
            list.get(course).add(prerequisite);
        }
        
        // Define an array of visited (0 -> unvisited, 1 -> visited, 2 -> completed), initially filled with 0's 
       int[] visited = new int[numCourses];
        
        for(int i = 0; i < numCourses; i++) {
            // if there is a cycle, return false
            if(dfs(list, visited, i)) 
                return false;
        }
        return true;
        
    }
    
    // dfs code
    public boolean dfs(List<List<Integer>> list, int[] visited, int cur){
        // Return false if the node is visited and viewed again before completion
        if(visited[cur] == 1) 
            return true;
        
        // Return true if the node is completed processing
        if(visited[cur] == 2) 
            return false;
        
        // Mark the node as visited
        visited[cur] = 1;
        
        // DFS of all the other nodes current "node" is connected to
        for(int next: list.get(cur)) {
            if(dfs(list, visited, next)) 
                return true;
        }
        
        // If no more other nodes for the current "node" mark as completed and return true
        visited[cur] = 2;
        
        return false;
    }
    
}


-------------------------

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];


        Map<Integer, Set<Integer>> adjList = new HashMap<>();
        for(int i=0; i < numCourses; i++){
            adjList.put(i, new HashSet<>());
        }

        // 1. populate indegree array and adjacency list
        // [[1,0]] means 0 need to be completed first before 1.. 0->1
        for(int[] pre : prerequisites){
            int course = pre[0];
            int dependingCourse = pre[1];
            adjList.get(dependingCourse).add(course); // O(m)
            indegree[course]++; // O(n)
        }

        // 2. add nodes to queue whose indegree is 0 to start the process
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i < numCourses; i++){
            if(indegree[i] == 0){
                queue.add(i);
            }
        }

        int nodesVisited =0;
        while(!queue.isEmpty()){
            int node = queue.remove(); // O(1) for each node, so O(N) for all nodes
            nodesVisited++;

            // 3. For each neighbor (nodes that have an incoming edge from node) of node, 
            // we decrement indegree[neighbor]by 1 to delete the node -> neighbor edge.
            for(int children : adjList.get(node)){ // O(M) to iterate over edges
                indegree[children]--;

                if(indegree[children] == 0){
                    queue.add(children);
                }
            }
        }

        return nodesVisited == numCourses;
    }
}
