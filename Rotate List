/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode dummy = new ListNode(0), slow = dummy, fast = dummy;
        dummy.next = head;
        
        int len = 0;
        while(fast.next != null){   // fast REACH tail && Count len
            fast = fast.next;
            len++;
        }
        
        if(head == null || head.next==null || k==0)
            return head;   // CHECK null
        
        k %= len;
        
        for(int i=0; i<len-k; i++)  // slow REACH before the rotated point 
            slow = slow.next;
        
        fast.next = dummy.next;      // CONNECT
        dummy.next = slow.next;
        slow.next = null;
        
        return dummy.next; 
        
    }
}


==========================

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k == 0) {
            return head;
        }

        ListNode curr = head;

        int length = 1;
        while (curr.next != null) {
            curr = curr.next;
             length++;
        }

        if (k % length == 0) {
            return head;
        }

        k %= length;
        curr.next = head;

        ListNode newLastNode = getKthNodeFrommLast(head, length - k);
        head = newLastNode.next;
        newLastNode.next = null;
        return head;
    }

    private ListNode getKthNodeFrommLast(ListNode head, int k) {
        int count = 1;
        ListNode temp = head;
        while (temp != null) {
            if (count == k) {
                return temp;
            }
                count++;
                temp = temp.next;
        }
        return temp;
    }
}
