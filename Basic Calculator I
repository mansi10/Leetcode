
class Solution {
    public int calculate(String s) {
        int result = 0;
        int currNo = 0;
        int sign = 1;
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {
                currNo = currNo * 10 + (c - '0');
            } else if (c == '+' || c == '-') {
                result += sign * currNo;
                currNo = 0;
                sign = (c == '+') ? 1 : -1;
            } else if (c == '(') {
                // Push the current result and sign onto the stack for later
                stack.push(result);
                stack.push(sign);

                // Reset for the new sub-expression
                result = 0;
                sign = 1;
            } else if (c == ')') {
                result += sign * currNo;
                currNo = 0;

                // Multiply with sign before parentheses
                result *= stack.pop();

                // Add previous result before parentheses
                result += stack.pop();
            } else if (c == ' ') {
                // ignore spaces
                continue;
            }
        }
        return result + sign * currNo;
    }
}
