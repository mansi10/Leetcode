// TC O(N)
// SC O(N)

public class Solution {
    public int numDecodings(String s) {
        if(s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }
        if(s.length() == 1) {
            return 1;
        }
        int oneBack = 1, twoBack = 1;
        for(int i=1;i<s.length();i++) {
            int singleDigit = s.charAt(i) - '0';
            int doubleDigit = (s.charAt(i-1) - '0') * 10 + singleDigit;
            int count = 0;
            if(singleDigit >= 1 && singleDigit <= 9) {
                count +=  oneBack;
            }
            if(doubleDigit >= 10 && doubleDigit <= 26) {
                count += twoBack;
            }
            twoBack = oneBack;
            oneBack = count;
        }
        return oneBack;
    }
}


-----------

class Solution {
    public int numDecodings(String s) {
        // dp[i] = no of ways to decode a string of length i
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        for(int i=2; i <= s.length(); i++){
            int oneDigit = Integer.valueOf(s.substring(i-1, i)); // current digit
            int twoDigit = Integer.valueOf(s.substring(i-2, i)); // current and previous digit

            if(oneDigit >= 1){
                dp[i] += dp[i-1]; // no of ways to decode i-1 string and appending i to them
            }

            if(twoDigit >= 10 && twoDigit <= 26){
                dp[i] += dp[i-2]; // no of ways to decode i-2 string and appending i to them
            }
        }
        return dp[s.length()];
    }
}

-----------
// TC O(N)
// SC O(1)

class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0 || s.charAt(0) == '0'){
            return 0;
        } // So s.charAt(0) != '0' is guaranteed, meaning the first digit is valid and can be decoded.

        int c1  = 1; // "" 2 digits back, ways to decode up to i - 2, which at the start is just dp[0] = decoding an empty string.
        int c2 = 1; // 1 digit back, ways to decode the first character 
        for(int i = 1; i< s.length(); i++){
            int count = 0;
            int oneDigit = s.charAt(i) - '0';
            int twoDigit = (s.charAt(i-1) - '0') *10 + oneDigit;
            if(oneDigit >= 1 && oneDigit <= 9){
                count += c2;
            }

            if(twoDigit >= 10 && twoDigit <= 26){
                count += c1;
            }
            // We compute the current decoding count using the values of c1 and c2, and
            // then slide the window:
            c1 = c2;
            c2 = count;
        }
        return c2;
    }
}
