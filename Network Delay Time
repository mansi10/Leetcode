Dijskhtra's algo

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        int totalTime = 0;
        
        Map<Integer, List<int[]>> edges = new HashMap<>();
        // 1. populate map with node as key and its [neighbors, distance] as value. 
        // Example = 2 -> [1,1], [3,1], [4,1]
        for (int[] time : times) {
            edges.putIfAbsent(time[0], new ArrayList<>());
            edges.get(time[0]).add(new int[]{ time[1], time[2] });
        }

        // 2. minheap so that the node with less distance is always on the top
        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        // 3. HashSet to keep track fo visited nodes
        Set<Integer> visited = new HashSet<>();

        // 4. add source node in heap
        queue.offer(new int[]{0,k}); // [distance, node]

        while (!queue.isEmpty()) {
            // 5. pop the node from queue, mark it as visited in HashSet and calculate the distance from the source node and insert its neighbors in queue
            int[] currNode = queue.poll();
            int time = currNode[0];
            int node = currNode[1];

            if (visited.contains(node)) {
                continue;
            }
            visited.add(node);
            totalTime = Math.max(totalTime, time);

            if(edges.containsKey(node)){
                for(int[] edge : edges.get(node)){
                    if (!visited.contains(edge[0])) {
                        queue.offer(new int[]{ edge[1] + time, edge[0] });
                    }
                }
            }
        }
        // 6. check if all nodes have been visited and return the time accordingly
        return visited.size() == n ? totalTime : -1;
    }
}
