class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        
        findCombinations(0, candidates, target, result, new ArrayList<>());
        
        return result;
    }
    
    private void findCombinations(int index, int[] arr, int target, List<List<Integer>> ans, List<Integer> ds) {
        
        if(index == arr.length){
            if(target == 0){
                ans.add(new ArrayList<>(ds));
            }
            return;
        }
        
        if(arr[index] <= target){
            // if the number at this index is picked
            ds.add(arr[index]);
            findCombinations(index, arr, target - arr[index], ans, ds);
            ds.remove(ds.size() - 1);
        }
        // if the number at this index is not picked 
        findCombinations(index+1, arr, target, ans, ds);
    }
}


====================

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        findCombinations(0, candidates, target, result, new ArrayList<>());
        return result;
    }

    private void findCombinations(int index, int[] arr, int target, List<List<Integer>> res, List<Integer> curr){
        if(target == 0){
            res.add(new ArrayList<>(curr));
            return;
        }

        if(index >= arr.length || target < 0){
            return;
        }

        for(int i = index ; i < arr.length; i++){
            curr.add(arr[i]);
            findCombinations(i, arr, target - arr[i], res, curr);
            curr.remove(curr.size() - 1);
        }
    }

    
}
