class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a,b) -> Integer.compare(a[1], b[1]));
        int noOfArrows = 1;
        int reach = points[0][1];
        
        for(int i=1; i< points.length; i++){
            // if start point of the current interval is greater than the end point of the previous interval, then it means no overlap, so more arrows are needed 
            if(points[i][0] > reach){
                noOfArrows++;
                reach = points[i][1];
            }
            else{
              // skip because an overlap exists and the same arrow will burst the overlapped balloons
            }
        }
        
        return noOfArrows;
    }
}

=======================================================

class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a,b) -> Integer.compare(a[0], b[0]));
        
        int end = points[0][1];
        int arrows = 1;
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                arrows++;
                end = points[i][1];
            } else {
                //points[i][0] <= end, so we have overlap
                end = Math.min(end, points[i][1]); //but we need to take the min so that all subsequently checked balloons will also be overlapping
            }
        }
        
        return arrows;
    }
}
