/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode curr = head;
        ListNode prevLast = null;

        while (curr != null) {
            ListNode kthNode = getKthNode(curr, k);

            if (kthNode == null) {
                if (prevLast != null) {
                    prevLast.next = curr;
                }
                break;
            }

            ListNode nextNode = kthNode.next;
            kthNode.next = null;

            getReverse(curr);

            if (curr == head) {
                head = kthNode;
            } else {
                prevLast.next = kthNode;
            }
            prevLast = curr;
            curr = nextNode;
        }
        return head;
    }

    private void getReverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;

        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
    }

    private ListNode getKthNode(ListNode node, int k) {
        ListNode curr = node;
        k -= 1;

        while (curr != null && k > 0) {
            k--;
            curr = curr.next;
        }
        return curr;
    }
}
