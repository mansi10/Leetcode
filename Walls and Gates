[[GATE] [INF] [INF] [INF] [GATE]]

queue: [ (gate_0,0), (gate_0,4) ]

Iteration 1: (updating distances from (gate_0,0)) : [[GATE] [1] [INF] [INF] [GATE]]
queue: [ (gate_0,0), (gate_0,4), (room_0,1) ]
Iteration 2: (updating distances from (gate_0,4) not from (room_0,1)) : [[GATE] [1] [INF] [1] [GATE]]
queue: [ (gate_0,0), (gate_0,4), (room_0,1), (room_0,3) ]
Iteration 3: (updating distances from (room_0,1)) : [[GATE] [1] [2] [1] [GATE]]
queue: [ (gate_0,0), (gate_0,4), (room_0,1), (room_0,3), (room_0,2) ]


================================

class Solution {
    public void islandsAndTreasure(int[][] grid) {
        int rows= grid.length;
        int cols = grid[0].length;
        int[][] dirs ={{0,1}, {1,0}, {0,-1}, {-1,0}};
        Queue<int[]> queue = new LinkedList<>();

        for(int i=0; i < rows; i++){
            for(int j=0; j < cols; j++){
                if(grid[i][j] == 0){
                    queue.offer(new int[]{i, j});
                }
            }
        }

        while(!queue.isEmpty()){
            int size = queue.size();
                for(int i=0; i < size; i++){
                    int[] curr = queue.poll();
                    for(int[] dir : dirs){
                        int row = curr[0] + dir[0];
                        int col = curr[1] + dir[1];
                        
                        if(row >= 0 && col >= 0 && row < rows && col < cols && grid[row][col] == Integer.MAX_VALUE){
                            grid[row][col] = grid[curr[0]][curr[1]] + 1;
                            queue.offer(new int[]{row, col});
                        }

                    }
                }
            }
        }
    }
