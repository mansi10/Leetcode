class Solution {
    public void wallsAndGates(int[][] rooms) {
        int rows = rooms.length;
        int cols = rooms[0].length;

        int[][] dirs = {{-1,0}, {0,1}, {0,-1}, {1,0}};
        boolean[][] visited = new boolean[rows][cols];

        if(rooms == null || rooms.length == 0){
            return;
        }

        Queue<int[]> queue = new LinkedList<>();
        for(int i=0; i < rows; i++){
            for(int j= 0; j < cols; j++){
                if(rooms[i][j] == 0 && !visited[i][j]){
                    queue.add(new int[]{i,j});
                    visited[i][j] = true;
                }
            }
        }

        while(!queue.isEmpty()){
            int[] curPos = queue.poll();
            int row = curPos[0];
            int col = curPos[1];

            for(int[] dir : dirs){
                int x = row + dir[0];
                int y = col + dir[1];

                if(x >= 0 && x < rows && y >= 0 && y < cols && rooms[x][y] == Integer.MAX_VALUE && !visited[x][y]){
                    rooms[x][y] = rooms[row][col]+1;
                    queue.add(new int[]{x, y});
                    visited[x][y] = true;
                }
            }
        }
    }
}
