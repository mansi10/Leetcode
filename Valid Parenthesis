class Solution {
    static Map<Character, Character> mappings = new HashMap<>();
    
    static{
        mappings.put(']','[');
        mappings.put('}','{');
        mappings.put(')','(');
        }
    
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();

    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);

      // If the current character is a closing bracket.
      if (this.mappings.containsKey(c)) {

        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
        char topElement = stack.empty() ? '#' : stack.pop();

        // If the mapping for this bracket doesn't match the stack's top element, return false.
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        // If it was an opening bracket, push to the stack.
        stack.push(c);
      }
    }

    // If the stack still contains elements, then it is an invalid expression.
    return stack.isEmpty();
  }
}


============================

class Solution {

    private static final Map<Character, Character> map = Map.of('(', ')',
    '{', '}',
    '[', ']');

    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for(char c : s.toCharArray()){
            if(map.containsKey(c)){
                stack.push(c);
            }else{
                if(stack.isEmpty()){
                    return false;
                }
                char open = stack.pop();
                if(map.get(open) != c) {   // bad match
                  return false;
            }
        }
    }return stack.isEmpty();
}
}

===============================

class Solution {
    public boolean isValid(String s) {
       Stack<Character> stack = new Stack<>();
       Map<Character, Character> map = new HashMap<>();
       map.put(')', '(');
       map.put('}', '{');
       map.put(']', '[');

       for(char c : s.toCharArray()){
        if(map.containsKey(c)){
            if(!stack.isEmpty() && (stack.peek() == map.get(c))){
                stack.pop();
            }else{
                return false;
            }
        }else{
            stack.push(c);
        }
    }
    return stack.isEmpty();
    }
}
