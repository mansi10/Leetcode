class MedianFinder {
    PriorityQueue<Integer> smallNums; // Max Heap
    PriorityQueue<Integer> largeNums; // Min Heap

    public MedianFinder() {
        smallNums = new PriorityQueue<>(Collections.reverseOrder());
        largeNums = new PriorityQueue<>();
    }

    public void addNum(int num) {
        // Add to maxHeap first (Group of smaller numbers)
        smallNums.offer(num);
        // Balance the heaps
        largeNums.offer(smallNums.poll());
        if (largeNums.size() > smallNums.size()) {
            smallNums.offer(largeNums.poll());
        }
      
      // if(leftMaxHeap.size()>rightMinHeap.size()+1)
        {
            int data=leftMaxHeap.poll();
            rightMinHeap.add(data);
        }
        else if(rightMinHeap.size()>leftMaxHeap.size()+1)
        {
            int data=rightMinHeap.poll();
            leftMaxHeap.add(data);
    //    }
        
        
    }

    public double findMedian() {
        if (smallNums.size() != largeNums.size()) {
            return smallNums.peek();
        }
        return (smallNums.peek() + largeNums.peek()) / 2.0;
    }
}


=================

class MedianFinder {
    PriorityQueue<Integer> maxHeap;
    PriorityQueue<Integer> minHeap;

    public MedianFinder() {
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        minHeap = new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        if(maxHeap.size() == 0 || maxHeap.peek() >= num){
            maxHeap.offer(num);
        }else{
            minHeap.offer(num);
        }
        balance();
    }
    
    public double findMedian() {
        if(maxHeap.size() > minHeap.size()){
           return maxHeap.peek();
        }else if(maxHeap.size() < minHeap.size()){
           return minHeap.peek();
        }
        return (minHeap.peek() + maxHeap.peek())/2.0;
    }

    private void balance(){
        if(maxHeap.size() - minHeap.size() > 1){
            minHeap.offer(maxHeap.poll());
        }else if(minHeap.size() - maxHeap.size() > 1){
            maxHeap.offer(minHeap.size());
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
